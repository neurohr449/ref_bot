import asyncio
import logging
import sys
import os
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from functions import *
from all_states import *

FAIL_KEYBOARD = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")]
            ])
TELEGRAM_VIDEO_PATTERN = r'https://t\.me/'


async def menu_message(message: Message, state: FSMContext):
    await state.set_state(UserState.menu)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = message.from_user.id
    user_name, bank_card, bank_bank, bank_sbp, bank_fio = await get_user_reg(sheet_id, user_id)
    await state.update_data(user_name = user_name,
                            bank_card=bank_card,
                            bank_bank = bank_bank,
                            bank_sbp = bank_sbp,
                            bank_fio = bank_fio)
    user_data = await state.get_data()
    name = user_data.get('user_name')
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéâ {name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data = "menu_1"),
                  InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data = "menu_2")],
                  [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data = "menu_3"),
                  InlineKeyboardButton(text="–ú–æ–∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã", callback_data = "menu_4")],
                  [InlineKeyboardButton(text="–û–±—â–∏–π —á–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data = "menu_5"),
                  InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞", callback_data = "menu_6")],
                  [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data = "menu_7"),
                  InlineKeyboardButton(text="–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data = "menu_8")]
                  ],
        
    )
    await message.answer(text=text,reply_markup=keyboard)

async def menu(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.menu)
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = callback_query.from_user.id
    user_name, bank_card, bank_bank, bank_sbp, bank_fio = await get_user_reg(sheet_id, user_id)
    await state.update_data(user_name = user_name,
                            bank_card=bank_card,
                            bank_bank = bank_bank,
                            bank_sbp = bank_sbp,
                            bank_fio = bank_fio)
    user_data = await state.get_data()
    name = user_data.get('user_name')
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéâ {name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data = "menu_1"),
                  InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data = "menu_2")],
                  [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data = "menu_3"),
                  InlineKeyboardButton(text="–ú–æ–∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã", callback_data = "menu_4")],
                  [InlineKeyboardButton(text="–û–±—â–∏–π —á–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", callback_data = "menu_5"),
                  InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞", callback_data = "menu_6")],
                  [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data = "menu_7"),
                  InlineKeyboardButton(text="–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data = "menu_8")]
                  ],
        
    )
    await callback_query.message.answer(text=text,reply_markup=keyboard)


async def main_menu_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(UserState.menu)
    await menu(callback_query, state)

###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###
async def reg_1(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    await get_table_data(sheet_id, 0, state)
    user_data = await state.get_data()
    text = user_data.get('reg_1')
    text_2 = user_data.get('reg_2')
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
    )
    if text:
        await callback_query.message.answer(text=text)
        await callback_query.message.answer(text=text_2, reply_markup = contact_keyboard)
        await state.set_state(UserState.reg_1)


async def reg_2(message: Message, state: FSMContext):
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    user_reg_status = await check_user_reg(sheet_id, user_id)
    if phone_number:
        if user_reg_status == False:
            await state.update_data(phone=phone_number)
            await message.answer(text = f"–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number}. –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å.  \n\n‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=ReplyKeyboardRemove())
            await state.set_state(UserState.reg_2)
        else:
            
            await menu_message(message, state)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=FAIL_KEYBOARD)

async def reg_3(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_name = message.text
    await state.update_data(user_name=user_name)
    text = user_data.get('reg_3')
    if text:
        await message.answer(text=text)
        await state.set_state(UserState.reg_3)


async def reg_4(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_last_name = message.text
    user_name = user_data.get('user_name')
    phone = user_data.get('phone')
    await state.update_data(user_last_name=user_last_name)
    text = f"üîé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:      \n\n‚Äî –ò–º—è: {user_name}     \n‚Äî –§–∞–º–∏–ª–∏—è:{user_last_name}     \n‚Äî –¢–µ–ª–µ—Ñ–æ–Ω: {phone}  \n\n------ \n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.  –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next"),InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change")]
    ])
    await message.answer(text=text, reply_markup = keyboard)
    await state.set_state(UserState.reg_4)

###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###Reg###
###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###

async def course_1(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "next":
        user_data = await state.get_data()
        sheet_id = user_data.get('sheet_id')
        user_phone = user_data.get('phone')
        func_id = user_data.get('func_id')
        await write_to_google_sheet(sheet_id=sheet_id,
                                    user_id=callback_query.from_user.id,
                                    username=callback_query.from_user.username,
                                    first_name=user_data.get('user_name'),
                                    last_name=user_data.get('user_last_name'),
                                    user_phone=user_phone
                                    )
        await get_table_data(sheet_id, 1, state)
        user_data = await state.get_data()
        text = user_data.get('text_1')
        video = user_data.get('video_1')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
                ])
        if text:
            match = re.search(TELEGRAM_VIDEO_PATTERN, video)
            if match:
                
                await callback_query.message.answer_video(video=video)
                await callback_query.message.answer(text=text, reply_markup = keyboard)
                await state.set_state(UserState.course_1)
                await callback_query.answer()
            else:
                
                await callback_query.message.answer(text=text, reply_markup = keyboard)
                await state.set_state(UserState.course_1)
                await callback_query.answer()
        else:
            await state.set_state(UserState.menu)
            await menu(callback_query, state)

    elif callback_query.data == "change":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
        await state.set_state(UserState.reg_2)

async def course_2(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_2')
    video = user_data.get('video_2')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_2)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_2)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

async def course_3(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_3')
    video = user_data.get('video_3')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_3)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_3)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

async def course_4(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_4')
    video = user_data.get('video_4')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_4)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_4)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

async def course_5(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_5')
    video = user_data.get('video_5')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_5)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_5)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

async def course_6(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_6')
    video = user_data.get('video_6')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_6)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_6)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

async def course_7(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_7')
    video = user_data.get('video_7')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_7)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_7)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

async def course_8(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_8')
    video = user_data.get('video_8')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_8)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_8)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)


async def course_9(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_9')
    video = user_data.get('video_9')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_9)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.course_9)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)


async def course_10(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text_10')
    video = user_data.get('video_10')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="menu")]
            ])
    if text:
        match = re.search(TELEGRAM_VIDEO_PATTERN, video)
        if match:            
            await callback_query.message.answer_video(video=video)
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.menu)
            await callback_query.answer()
        else:
            
            await callback_query.message.answer(text=text, reply_markup = keyboard)
            await state.set_state(UserState.menu)
            await callback_query.answer()
    else:
        await state.set_state(UserState.menu)
        await menu(callback_query, state)

###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###Course###

###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu###Menu

async def send_client_1(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.send_client_1)
    user_data = await state.get_data()
    text = user_data.get('send_client_1')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="next"),
             InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)

async def send_client_2(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.send_client_2)
    user_data = await state.get_data()
    text = user_data.get('send_client_2')
    await callback_query.message.answer(text = text)

async def send_client_3(message: Message, state: FSMContext):
    lead_fio = message.text
    await state.update_data(lead_fio=lead_fio)
    await state.set_state(UserState.send_client_3)
    user_data = await state.get_data()
    text = user_data.get('send_client_3')
    await message.answer(text = text)

async def send_client_4(message: Message, state: FSMContext):
    lead_phone = message.text
    user_data = await state.get_data()
    client_name = user_data.get('lead_fio')
    await state.update_data(lead_phone=lead_phone)
    await state.set_state(UserState.send_client_4)
    text = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä—É.   \n\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞{lead_phone}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confurm"),
             InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")]
            ])
    await message.answer(text = text, reply_markup = keyboard)


async def send_client_5(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    client_name = user_data.get('lead_fio')
    lead_phone = user_data.get('lead_phone')
    sheet_id = user_data.get('sheet_id')
    await write_to_lead_google_sheet(
        sheet_id=sheet_id,
        first_name=client_name,
        ref_phone=lead_phone,
        user_id=callback_query.from_user.id,
        username=callback_query.from_user.username
    )
    text = f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É.   \n\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞{lead_phone}   \n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ \"–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤\""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)
#####################
async def client_status_1(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.client_status_1)
    user_data = await state.get_data()
    text = user_data.get('client_status')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="in_progress"),
             InlineKeyboardButton(text="–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã", callback_data="waiting_for_payment")],
             [InlineKeyboardButton(text="–í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data="payed"),
             InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞–Ω–æ", callback_data="denied")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)

async def client_status_2(callback_query: CallbackQuery, state: FSMContext):
    status = callback_query.data
    user_data = await state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = callback_query.from_user.id

    if status == "in_progress":
        func_status = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤ —Ä–∞–±–æ—Ç–µ"
    elif status == "waiting_for_payment":
        func_status = "–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã"
    elif status == "payed":
        func_status = "–í—ã–ø–ª–∞—á–µ–Ω–æ"
    elif status == "denied":
        func_status = "–û—Ç–∫–∞–∑–∞–Ω–æ"
    lead_list = await read_lead_google_sheet(sheet_id, user_id, func_status)

    formatted_lead_list = "".join(lead_list).strip()

    text = f"–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {func_status}\n\n {formatted_lead_list}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)

async def ref_link_1(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('ref_link_1')
    text_2 = user_data.get('ref_link_2')
    sheet_id = user_data.get('sheet_id')
    user_id = callback_query.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text)
    await callback_query.message.answer(text = f"{text_2} https://t.me/teferal_test_bot?start={sheet_id}_{user_id}_1", reply_markup = keyboard)

async def bank_info_1(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.bank_info_change)
    
    
    user_data = await state.get_data()
    card_number = user_data.get('bank_card')
    if not card_number:
        card_number = ""
    bank_name = user_data.get('bank_bank')
    if not bank_name:
        bank_name = ""
    bank_sbp = user_data.get('bank_sbp')
    if not bank_sbp:
        bank_sbp = ""
    bank_fio = user_data.get('bank_fio')
    if not bank_fio:
        bank_fio = ""
    text = f"–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üìù  \n–£ –Ω–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç:     \n\n ‚Äî –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}     \n‚Äî –ë–∞–Ω–∫: {bank_name}     \n‚Äî –¢–µ–ª–µ—Ñ–æ–Ω: {bank_sbp}     \n‚Äî –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {bank_fio}   \n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üòä"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="card_number"),
             InlineKeyboardButton(text="–ë–∞–Ω–∫", callback_data="bank")],
             [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω(–°–ë–ü)", callback_data="sbp"),
             InlineKeyboardButton(text="–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data="fio")],
             [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)

async def bank_info_change_card_number(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.card_number_change)
    user_data = await state.get_data()
    text = user_data.get('bank_1')
    await callback_query.message.answer(text = text)


async def bank_info_change_bank(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.bank_change)
    user_data = await state.get_data()
    text = user_data.get('bank_2')
    await callback_query.message.answer(text = text)


async def bank_info_change_sbp(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.sbp_change)
    user_data = await state.get_data()
    text = user_data.get('bank_3')
    await callback_query.message.answer(text = text)


async def bank_info_change_fio(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.bank_fio_change)
    user_data = await state.get_data()
    text = user_data.get('bank_4')
    await callback_query.message.answer(text = text)

async def bank_info_change_card_number_2(message: Message, state: FSMContext):
    await state.update_data(card_number = message.text)
    user_data = state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = message.from_user.id
    bank_info = "card"
    await change_bank_info_google_sheet(sheet_id, user_id, bank_info, message.text)
    await bank_info_1(message, state)

async def bank_info_change_bank_2(message: Message, state: FSMContext):
    await state.update_data(bank_name = message.text)
    user_data = state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = message.from_user.id
    bank_info = "bank"
    await change_bank_info_google_sheet(sheet_id, user_id, bank_info, message.text)
    await bank_info_1(message, state)

async def bank_info_change_sbp_2(message: Message, state: FSMContext):
    await state.update_data(bank_sbp = message.text)
    user_data = state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = message.from_user.id
    bank_info = "sbp"
    await change_bank_info_google_sheet(sheet_id, user_id, bank_info, message.text)
    await bank_info_1(message, state)

async def bank_info_change_fio_2(message: Message, state: FSMContext):
    await state.update_data(bank_fio = message.text)
    user_data = state.get_data()
    sheet_id = user_data.get('sheet_id')
    user_id = message.from_user.id
    bank_info = "fio"
    await change_bank_info_google_sheet(sheet_id, user_id, bank_info, message.text)
    await bank_info_1(message, state)

async def chat_link(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('partner_chat')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)

async def tos(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('tos')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)

async def add_partner_1(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.add_partner_1)
    user_data = await state.get_data()
    text = user_data.get('add_partner_1')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîú –î–∞–ª—å—à–µ", callback_data="next"),
             InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
    await callback_query.message.answer(text = text, reply_markup = keyboard)


async def add_partner_2(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.add_partner_2)
    user_data = await state.get_data()
    text = user_data.get('add_partner_2')
    
    await callback_query.message.answer(text = text)

async def add_partner_3(message: Message, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('add_partner_3')
    await message.answer(text = text)

async def contact_us(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('tos')
    await callback_query.message.answer(text = text)


