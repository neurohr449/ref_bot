import psycopg2
from psycopg2 import sql, errors
import asyncpg
from aiogram import Bot, types
import gspread
from google.oauth2.service_account import Credentials
import os
import asyncio
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest


from functions import get_google_sheet_data
from main import get_chat_id

DB_HOST = os.getenv("DB_HOST")          
DB_PORT = os.getenv("DB_PORT")          
DB_NAME = os.getenv("DB_NAME")          
DB_USER = os.getenv("DB_USER")          
DB_PASSWORD = os.getenv("DB_PASSWORD")  

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))

async def get_chat_id(user_id: int):
    try:
        chat = await bot.get_chat(user_id)  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –ø–æ user_id
        return chat.id
    except TelegramBadRequest:
        print("–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞!")
        return None

async def add_lead_to_db(conn, referral_id: str, partner_tg_id: str, status: str, sheet_id: str, sheet_name: str = None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ª–∏–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
    """
    try:
        with conn.cursor() as cursor:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            cursor.execute(
                "INSERT INTO tracked_sheets (sheet_id, sheet_name) VALUES (%s, %s) ON CONFLICT (sheet_id) DO NOTHING",
                (sheet_id, sheet_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            )
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
            cursor.execute(
                """
                INSERT INTO lead_status_updates 
                    (referral_id, partner_tg_id, last_status, sheet_id)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (referral_id, sheet_id) 
                DO UPDATE SET last_status = EXCLUDED.last_status
                """,
                (referral_id, partner_tg_id, status, sheet_id)
            )
            conn.commit()
            
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞: {e}")


async def check_for_status_updates(bot: Bot, conn, sheet_id: str):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ Google Sheets —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        leads = get_google_sheet_data(sheet_id, 3)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        
        # 2. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å –ë–î
        with conn.cursor() as cursor:
            for lead in leads:
                referral_id = str(lead["id –†–µ—Ñ–µ—Ä–∞–ª–∞"])
                current_status = str(lead["–°—Ç–∞—Ç—É—Å"])
                
                # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
                cursor.execute(
                    """
                    SELECT last_status, partner_tg_id 
                    FROM lead_status_updates 
                    WHERE referral_id = %s AND sheet_id = %s
                    """,
                    (referral_id, sheet_id)
                )
                result = cursor.fetchone()
                
                # 4. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if result:
                    stored_status, partner_tg_id = result
                    if stored_status != current_status:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        chat_id = await get_chat_id(partner_tg_id)
                        await bot.send_message(
                            chat_id,
                            f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞!\n"
                            f"ID: {referral_id}\n"
                            f"–ë—ã–ª–æ: {stored_status}\n"
                            f"–°—Ç–∞–ª–æ: {current_status}"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                        cursor.execute(
                            """
                            UPDATE lead_status_updates 
                            SET last_status = %s
                            WHERE referral_id = %s AND sheet_id = %s
                            """,
                            (current_status, referral_id, sheet_id)
                        )
                        conn.commit()
                        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")


async def get_async_connection():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
    return await asyncpg.create_pool(
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        host=DB_HOST,
        min_size=1,
        max_size=10
    )

async def periodic_check(bot: Bot, pool, interval: int = 60):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥."""
    while True:
        try:
            async with pool.acquire() as conn:  # –ë–µ—Ä—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
                sheets = await conn.fetch("SELECT sheet_id FROM tracked_sheets")
                for sheet in sheets:
                    await check_for_status_updates(bot, conn, sheet['sheet_id'])
                    
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ñ–¥–µ–º {interval} —Å–µ–∫...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ periodic_check: {e}")
            
        await asyncio.sleep(interval)  # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ